name: CI

on:
  push:
    branches: [dev] # dev 브랜치에 push될 때 실행

env:
  SPRING_PROFILES_ACTIVE: test
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
  OPENAI_SECRET_KEY: ${{ secrets.OPENAI_SECRET_KEY }}
  MESSAGE_API_KEY: ${{ secrets.MESSAGE_API_KEY }}
  MESSAGE_API_SECRET: ${{ secrets.MESSAGE_API_SECRET }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}
  KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

jobs:
  # ✅ CI 단계: 코드 테스트 및 Docker 이미지 빌드
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build & Test Spring Boot Application
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test # 필요 시 -x test 제거하여 테스트 실행 가능

      - name: Build Docker Image
        run: |
          docker build -t carebridge-app .

      - name: Save Docker Image
        run: |
          docker save -o carebridge-app.tar carebridge-app

      - name: Upload Docker Image to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: carebridge-app
          path: carebridge-app.tar

  # ✅ CD 단계: EC2 배포 및 컨테이너 실행
  deploy:
    needs: build # CI 성공 후 실행
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: carebridge-app
          path: .

      - name: Upload Docker Image to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "carebridge-app.tar"
          target: "/home/ec2-user/app/"

      - name: Deploy Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app/
            
            # 기존 컨테이너 중지 및 삭제
            docker stop carebridge-container || true
            docker rm carebridge-container || true
            docker rmi carebridge-app || true
            
            # 새 Docker 이미지 로드 및 실행
            docker load -i carebridge-app.tar
            docker run -d --name carebridge-container --restart always -p 8080:8080 carebridge-app
